<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>android on kostovtd.com</title>
    <link>https://kostovtd.com/tags/android/</link>
    <description>Recent content in android on kostovtd.com</description>
    <image>
      <url>https://kostovtd.com/papermod-cover.png</url>
      <link>https://kostovtd.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kostovtd.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Location without Google Services</title>
      <link>https://kostovtd.com/posts/location-no-services/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/location-no-services/</guid>
      <description>These days you will rarely find an app that doesn&amp;rsquo;t have some kind of location-based functionality. Things like navigation, geofencing or location tracking are more and more common. It&amp;rsquo;s all good when you can rely on Google Play Services. Sadly, that&amp;rsquo;s not always the case. Sometimes the devices that your users are going to use don&amp;rsquo;t have Play Services installed. Such devices can be manufactured by some weird and unknown company, can have a custom ROM installed on them, or be located in a country where Google is not allowed to operate.</description>
    </item>
    
    <item>
      <title>Lifecycle changes after API 28</title>
      <link>https://kostovtd.com/posts/lifecycle-changes-api-28/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/lifecycle-changes-api-28/</guid>
      <description>Some time ago, I was going through the documentation about the infamous Activity class. All was good and even uneventful until I came across an interesting paragraph stating the following:
A question popped up in my head- but why the change in the order?
My first idea was to search for any articles on the topic. Sadly, with no result.
Then, I decided to go through the source code of the Activity class.</description>
    </item>
    
    <item>
      <title>Flow types</title>
      <link>https://kostovtd.com/posts/flow-types/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/flow-types/</guid>
      <description>It&amp;rsquo;s been a while since my last post! Actually, more than 4 years&amp;hellip; The Android ecosystem has changed a lot during that time! Some new concepts were introduced, some old programming languages were left behind and we have to make the most out of this situation (as always). So, let&amp;rsquo;s get down to business!
What is a Flow? (briefly) The flow is a &amp;ldquo;new&amp;rdquo; concept of doing asynchronous tasks. Flows are built on top of coroutines and I am sure you have heard about them.</description>
    </item>
    
    <item>
      <title>Logging in Android</title>
      <link>https://kostovtd.com/posts/logging-android/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/logging-android/</guid>
      <description>I am sure that each developer out there have heard the phrase ‘Check the logs’ at least once during his or here career! And checking the logs have saved my ass several times this month. But what exactly a log message is and what are the advantages and disadvantages of logging? Let’s try to find out!
What is logging? Logging — the cutting, skidding, on-site processing and loading of trees onto trucks.</description>
    </item>
    
    <item>
      <title>Android tricks - Runtime permissions and the &#39;Never ask again&#39; option</title>
      <link>https://kostovtd.com/posts/run-time-permissions-never-ask-again/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/run-time-permissions-never-ask-again/</guid>
      <description>With Android 6.0 (API 23) users are able to grant app permissions during run time. That new feature made our developer lives a bit more difficult, but gave huge powers to our users. And do you remember that little check box which says &amp;lsquo;Never ask me again&amp;rsquo;?
Yep&amp;hellip; this particular one! So, how can we know that this check box had ever been selected by the user? Actually, it&amp;rsquo;s not that difficult!</description>
    </item>
    
    <item>
      <title>Rooting Android</title>
      <link>https://kostovtd.com/posts/rooting-android/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/rooting-android/</guid>
      <description>The Android OS is famous with it’s many customization capabilities. This gives us the opportunity to experiment as much as we want. We can change the look and feel of the OS, or we can dive deeper and tinker with things like GPU, CPU and other scary abbreviations. But before getting our hands dirty, we need to do something else. We need to root our phone first.
What is rooting? Long story short, to root your phone means to get all the privileges, permissions and goodies of an admin user.</description>
    </item>
    
    <item>
      <title>Parcelable vs Serializable</title>
      <link>https://kostovtd.com/posts/parcelable-vs-serializable/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/parcelable-vs-serializable/</guid>
      <description>Often, when we develop applications, we have to transfer data from one Activity to another. Of course, we can not do that directly. The data we want to transfer must be included into a corresponding Intent object. And if we want to move a complex POJO (e.x. Person, Car, Employee, etc.) we also need to perform some additional actions to make that object suitable for a transfer. To do that, our object must be either Serializable or Parcelable.</description>
    </item>
    
    <item>
      <title>How to use App Links Assistant in Android Studio 2.3</title>
      <link>https://kostovtd.com/posts/app-links-assistant/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/app-links-assistant/</guid>
      <description>With each and every new version of Android, more and more features are included into the OS. The apps become more flexible and user-friendly. Both users and developers can experiment and try new features and configurations. Of course, these boundaries can not be pushed without improving the actual tools used for developing the applications. Thus, our beloved Android Studio is evolving as well! Many bugs were fixed and new features were introduced with version 2.</description>
    </item>
    
    <item>
      <title>App Shortcuts in details</title>
      <link>https://kostovtd.com/posts/app-shortcuts/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/app-shortcuts/</guid>
      <description>Not long ago, the iOS users were introduced to a new feature called 3D Touch. What this feature does is to provide a limited list of actions that you can do without entering an app. Of course, the folks from Google were ready to respond to that. Thus, the App Shortcuts feature was included in Android 7.1.1
What are App shortcuts? The main idea behind App Shortcuts is not different than the one behind the 3D Touch.</description>
    </item>
    
    <item>
      <title>DirectBoot in details</title>
      <link>https://kostovtd.com/posts/direct-boot/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/direct-boot/</guid>
      <description>Android 7.0 (Nougat) brought plenty of new features to both average users and developers. Alongside features like Multi-window view, Notification Direct Reply and File-based Encryption something called Direct Boot was included as well. Although, it doesn&amp;rsquo;t sound like a game changer, it still can have a huge impact on the user satisfaction. Using this new feature with creativity and responsibility can result in better applications. But what exactly is the idea behind Direct Boot?</description>
    </item>
    
    <item>
      <title>Android tricks - How to compare two drawables?</title>
      <link>https://kostovtd.com/posts/compare-drawable/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/compare-drawable/</guid>
      <description>Drawables are widely used throughout the developing process of Android applications. Because of one reason, or another we can be interested in comparing two drawable objects. At first, that sounds like an easy task, but actually it can be a bit tricky.
The &amp;lsquo;==&amp;rsquo; operator Of course, if you have two different instances of the same drawable resource, the &amp;lsquo;==&amp;rsquo; operator is useless. It&amp;rsquo;s gonna compare if the left and the right side are actually the same instance.</description>
    </item>
    
    <item>
      <title>Android tricks - How to determine the current state of your SearchView?</title>
      <link>https://kostovtd.com/posts/determin-searchview-state/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/determin-searchview-state/</guid>
      <description>The SearchView provides a way for the user to enter a search query and submit it to a search provider. It&amp;rsquo;s a widely used UI pattern in the Android system. Though, a simple task like figuring out if the search box is currently visible can be a bit tricky.
On the image below, you can see the two possible states for a SearchView. On the left one, the view is closed.</description>
    </item>
    
    <item>
      <title>RecyclerView &amp; ListView basic comparison</title>
      <link>https://kostovtd.com/posts/recyclerview-vs-listview/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/recyclerview-vs-listview/</guid>
      <description>Do you remember the good old ListView? Back then it was the only option for showing items in scrolling lists. Then, at some point, a new player entered the field - the RecyclerView. For some period of time I was definitely confused about which one should I use. But day by day the RecyclerView took the whole stage and there was almost nothing left for the old ListView. Nowadays, if you need a listing functionality, the RecyclerView is the place to go.</description>
    </item>
    
    <item>
      <title>Android tricks - Is there a way to customize the permissions dialog?</title>
      <link>https://kostovtd.com/posts/customize-permission-dialog/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/customize-permission-dialog/</guid>
      <description>With Android 6.0 Marshmallow a really important feature was introduced to the Android users. Yes! I&amp;rsquo;m talking about the run-time permissions. The &amp;ldquo;all or nothing&amp;rdquo; approach related to the app&amp;rsquo;s permissions was wiped out. If running on Marshmallow or a later version, the users can enable and disable permissions whenever they want. And that&amp;rsquo;s how the nightmare for all of us, the developers, began!
When going through this nightmare, have you asked yourself, if it is possible to change the UI of the dialog?</description>
    </item>
    
    <item>
      <title>Android tricks - How to add strikethrough text in TextView</title>
      <link>https://kostovtd.com/posts/add-strikethrough/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/add-strikethrough/</guid>
      <description>The strikethrough effect can be really useful in many situations. You can use it when you want to show a discount price, when you want to mark a wrong word or in many other situations. We all know that feature from software products like Word, Evernote, Sublime, etc. But how can we do the same thing with our simple TextView?
There are two different ways to do that, based on the desired result.</description>
    </item>
    
    <item>
      <title>Android tricks - How to make the text of a RadioButton appear on it&#39;s left side?</title>
      <link>https://kostovtd.com/posts/radio-button-text-left-side/</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/radio-button-text-left-side/</guid>
      <description>Let&amp;rsquo;s start 2017 with a quick and useful &amp;lsquo;How to&amp;rsquo; article!
Have you ever tried to make the text of a RadioButton appear on it&amp;rsquo;s left side? It&amp;rsquo;s tricky! You can check to source code down below:
Code description By default, for the usual left-to-right layout, the text appears on the right side of the RadioButton. As you can see from the snipped above, we actually use a particular property to change the direction of the current view:</description>
    </item>
    
    <item>
      <title>Android tricks - Determine current screen density</title>
      <link>https://kostovtd.com/posts/screen-density/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/screen-density/</guid>
      <description>Do you know the thing I hate the most about Android? It&amp;rsquo;s screen fragmentation! On the one hand, having a huge variety of screen sizes is great for the end users. But it&amp;rsquo;s a complete nightmare for developers! Thus, it&amp;rsquo;s really hard to create a good looking UI without any problems. There will always be a device with some wired screen size on which your layout will look bad!
There are several different approaches for handling this problem.</description>
    </item>
    
    <item>
      <title>DiffUtil in details</title>
      <link>https://kostovtd.com/posts/diffutils-details/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/diffutils-details/</guid>
      <description>The chances of developing a medium to large size Android application without using RecyclerView are relatively low. The scrollable list, as UI and UX pattern, is really powerful. It gives us the possibility to group similar items or entities into lists. They are easy to grab and to understand.
But there are some difficulties related to this pattern as well. We often have to update those lists with some newly entered, or server-fetched information.</description>
    </item>
    
    <item>
      <title>Intent VS PendingIntent</title>
      <link>https://kostovtd.com/posts/intent-vs-pendingintent/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/intent-vs-pendingintent/</guid>
      <description>2016 is officially over and here we are at the beginning of 2017! So let&amp;rsquo;s start the year with some wisdom!
Have you ever wondered what is the difference between Intent and PendingIntent? Well, although they sound similar, there is a difference between them. As you can see, the documentation about these two entities is extensive and provides lots of information. But we will try to summarize it in a shorter version.</description>
    </item>
    
    <item>
      <title>Geo-fencing with MVP Part 4</title>
      <link>https://kostovtd.com/posts/geo-fencing-mvp-part4/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/geo-fencing-mvp-part4/</guid>
      <description>Here we are, at the last, fourth part of the series about Geofencing and MVP. In this last article we will talk about the actual registration and addition process of the predefined POJO geofences. Aaand we will make a short summery of the articles up till now.
In part 3 we said that there are two different groups of entities in the manager package. The first group is responsible for providing the location awareness logic for our app, and the second is responsible for handling the actual geofencing functionality.</description>
    </item>
    
    <item>
      <title>Android tricks - How to find view&#39;s dimensions before displaying the view?</title>
      <link>https://kostovtd.com/posts/find-view-dimensions/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/find-view-dimensions/</guid>
      <description>Two days ago I had to work with some views (Surprise! Surprise!). At some point I had to get the actual views&amp;rsquo; width and height, before actually displaying the views. Of course, they were included in my XML layout. Thus this made the task a little bit easier. After spending several minutes on Google (ALWAYS do that, when you are in trouble), I found a solution.
Code Description: You can see that we can actually obtain the view&amp;rsquo;s dimensions thanks to the Display class.</description>
    </item>
    
    <item>
      <title>Geo-fencing with MVP Part 3</title>
      <link>https://kostovtd.com/posts/geo-fencing-mvp-part3/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/geo-fencing-mvp-part3/</guid>
      <description>With the previous two posts, we went through the basic concepts behind the idea of geofencing, why using design patterns and we dived deeper in the main components used in the construction of the example application for these series. Now in the third part, we will go through the classes which are responsible for the core geofencing functionality. I hope you still remember the overall MVP design diagram from the previous post!</description>
    </item>
    
    <item>
      <title>Android tricks - How to add an icon to your Toolbar?</title>
      <link>https://kostovtd.com/posts/add-icon-toolbar/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/add-icon-toolbar/</guid>
      <description>Today I had to implement something which is not so popular throughout the Android universe. I had to implement a simple Toolbar with a logo on it&amp;rsquo;s left side. That&amp;rsquo;s not so popular these days, but from time to time there always will be someone who wants something like that. All in all, the end result had to be similar to the one down below:
I ended up with two different solutions based on weather you want your icon to be on the left side of the title, or on the right side.</description>
    </item>
    
    <item>
      <title>Geo-fencing with MVP Part 2</title>
      <link>https://kostovtd.com/posts/geo-fencing-mvp-part2/</link>
      <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/geo-fencing-mvp-part2/</guid>
      <description>In the previous post, we talked about the idea behind geo-fencing, why is it so useful and what is the reason behind choosing a particular design pattern like MVP. It was most like an introductory step before getting our hands dirty with some actual source code. Thus, in this part of the series, I will try to go through the different layers of the MVP pattern and will try to explain as much as possible the things that are happening there.</description>
    </item>
    
    <item>
      <title>Android tricks - How to prevent AlertDialog from dismissing after onClick event?</title>
      <link>https://kostovtd.com/posts/prevent-alert-dialog-dismiss/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/prevent-alert-dialog-dismiss/</guid>
      <description>Have you noticed that the default behavior of AlertDialog is to disappear after onClick event? I&amp;rsquo;m sure you have! But there are cases when we actually don&amp;rsquo;t want to dismiss the dialog. In these situation, the default behavior of the AlertDialog must be overridden. Down below you will find a snippet which is doing exactly that thing.
Code description So what exactly is happening in that snippet? You can see that when we are constructing the AlertDialog object by using the Builder Pattern, we are setting null parameters to the methods responsible for setting up the behavior of the positive and the negative buttons.</description>
    </item>
    
    <item>
      <title>Geo-fencing with MVP Part 1</title>
      <link>https://kostovtd.com/posts/geo-fencing-mvp-part1/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/geo-fencing-mvp-part1/</guid>
      <description>Several weeks ago, I had to implement a geo-fencing functionality in one of the projects on which I was currently working on. Due to the fact that I had never done that before, I had to do a &amp;lsquo;small&amp;rsquo; research on the topic. Of course, tools like Google, Stackoverflow, the Android Documentation, etc. were there to help me. Happily, I managed to inform myself on the topic, but there was a small detail.</description>
    </item>
    
    <item>
      <title>Android tricks - Overriding toString() in POJOs</title>
      <link>https://kostovtd.com/posts/override-to-string/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/override-to-string/</guid>
      <description>Although, this small trick is not specifically related to the Android SDK, it is still a useful one. The ROI (Return On Investment and by investment I mean time) of overriding the toString() method of your POJOs (Plain Old Java Objects) is relatively high. At the end of the day, this small thing can make your developer life just a little bit better.
How to override the toString() method? There are two different ways for overriding this method (and any other method as well) - manually or automatically.</description>
    </item>
    
    <item>
      <title>Android tricks - ViewPager and Offscreen Tabs</title>
      <link>https://kostovtd.com/posts/viewpager-offscreen-tabs/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/viewpager-offscreen-tabs/</guid>
      <description>As I wrote in one of my first posts, we use Tabs a lot in our applications. They provide a great way of navigating to different screens through our app. And in order to use tabs, we have to work with something call a ViewPager. According to the official documentation, this is a layout manager that allows us to flip left and right through pages of data. These pages of data are usually composed of Fragments.</description>
    </item>
    
    <item>
      <title>Flavors</title>
      <link>https://kostovtd.com/posts/flavors/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/flavors/</guid>
      <description>Banana, blueberries, cherry, coffee, cream. These are all great ice cream flavors! Especially the first two! But because of the cold weather outside, we are not going to talk about ice cream. Instead, we will talk about one of the great features of the Android Gradle plugin called Flavors.
What are Flavors? The idea behind that feature is relatively simple. It provides version customization possibilities. In other words, we can provide different version of the same application with some minor differences.</description>
    </item>
    
    <item>
      <title>Android tricks - Gradle and license agreements</title>
      <link>https://kostovtd.com/posts/gradle-license-agreement/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/gradle-license-agreement/</guid>
      <description>Working with Gradle through Android Studio is fairly easy and pleasant thing. But sometimes, you will need to build your projects on a machine without Android Studio. Gradle can be really helpful during that process and can automatically download any missing SDK packages as long as the accepted license agreement for them is in place. If it is missing, then you will have a problem.
How to find the license agreement?</description>
    </item>
    
    <item>
      <title>Android tricks - Hide a folder from the Gallery app</title>
      <link>https://kostovtd.com/posts/hide-folder-from-gallery/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/hide-folder-from-gallery/</guid>
      <description>Here is a small trick for preventing a folder from appearing in the Gallery application:
Code description The general idea is really simple. We just have to create an empty file with the name .nomedia. That&amp;rsquo;s all! And that&amp;rsquo;s exactly what we want to do with the code snippet above. When the media scanner detects the .nomedia file, the folder is just being skipped by the OS and thus it wont be visible from the Gallery application.</description>
    </item>
    
    <item>
      <title>Useful Resources for Android Developers</title>
      <link>https://kostovtd.com/posts/usefull-resources-for-android-developers/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/usefull-resources-for-android-developers/</guid>
      <description>Originally published on 11/06/2016
During the past two years I&amp;rsquo;d managed to find several useful tools &amp;amp; resources, which I use over and over again during my every day work. There is no doubt, that almost all of them are well known to everyone, but I feel that I have to share them with you despite that fact. This is a mixture between information &amp;amp; tutorial resources, useful tools for networking and other small things that can make your developer&amp;rsquo;s life easier.</description>
    </item>
    
    <item>
      <title>How to add margins between tabs in TabLayout</title>
      <link>https://kostovtd.com/posts/add-margins-between-tabs/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/add-margins-between-tabs/</guid>
      <description>Tabs&amp;hellip; Almost each and every application has at least one screen with tabs. Using that UI pattern gives us the desired high level organization of the content we have in our app.
Several months ago I had to implement a TabLayout with margins between the tabs, which at the begging seemed like a regular task. Sadly, I was wrong. I expected to be fairly easy, but there was not a straight forward way to do that.</description>
    </item>
    
    <item>
      <title>Code templates</title>
      <link>https://kostovtd.com/posts/code-templates/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kostovtd.com/posts/code-templates/</guid>
      <description>After thinking about launching a blog for Android for near a month, finally I decided to do it! So here is the first and hopefully not the last post on the vast field of Android Development!
As developers, we sometimes have the awesome privilege to work on something really interesting for us like geofencing, another cool and good looking animation, face recognition or something else. But that&amp;rsquo;s not always the case.</description>
    </item>
    
  </channel>
</rss>
